// Generated by view binder compiler. Do not edit!
package com.example.powerup.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.powerup.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TrackworkoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Spinner equipmentSpinner;

  @NonNull
  public final TextView equipmentTextView;

  @NonNull
  public final Spinner intensitySpinner;

  @NonNull
  public final TextView intensityTextView;

  @NonNull
  public final Spinner muscleSpinner;

  @NonNull
  public final TextView muscleTextView;

  @NonNull
  public final Button searchButton;

  private TrackworkoutBinding(@NonNull RelativeLayout rootView, @NonNull Spinner equipmentSpinner,
      @NonNull TextView equipmentTextView, @NonNull Spinner intensitySpinner,
      @NonNull TextView intensityTextView, @NonNull Spinner muscleSpinner,
      @NonNull TextView muscleTextView, @NonNull Button searchButton) {
    this.rootView = rootView;
    this.equipmentSpinner = equipmentSpinner;
    this.equipmentTextView = equipmentTextView;
    this.intensitySpinner = intensitySpinner;
    this.intensityTextView = intensityTextView;
    this.muscleSpinner = muscleSpinner;
    this.muscleTextView = muscleTextView;
    this.searchButton = searchButton;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TrackworkoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TrackworkoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.trackworkout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TrackworkoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.equipment_spinner;
      Spinner equipmentSpinner = ViewBindings.findChildViewById(rootView, id);
      if (equipmentSpinner == null) {
        break missingId;
      }

      id = R.id.equipment_text_view;
      TextView equipmentTextView = ViewBindings.findChildViewById(rootView, id);
      if (equipmentTextView == null) {
        break missingId;
      }

      id = R.id.intensity_spinner;
      Spinner intensitySpinner = ViewBindings.findChildViewById(rootView, id);
      if (intensitySpinner == null) {
        break missingId;
      }

      id = R.id.intensity_text_view;
      TextView intensityTextView = ViewBindings.findChildViewById(rootView, id);
      if (intensityTextView == null) {
        break missingId;
      }

      id = R.id.muscle_spinner;
      Spinner muscleSpinner = ViewBindings.findChildViewById(rootView, id);
      if (muscleSpinner == null) {
        break missingId;
      }

      id = R.id.muscle_text_view;
      TextView muscleTextView = ViewBindings.findChildViewById(rootView, id);
      if (muscleTextView == null) {
        break missingId;
      }

      id = R.id.search_button;
      Button searchButton = ViewBindings.findChildViewById(rootView, id);
      if (searchButton == null) {
        break missingId;
      }

      return new TrackworkoutBinding((RelativeLayout) rootView, equipmentSpinner, equipmentTextView,
          intensitySpinner, intensityTextView, muscleSpinner, muscleTextView, searchButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
